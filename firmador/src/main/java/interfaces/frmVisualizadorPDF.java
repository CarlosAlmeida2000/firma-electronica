/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaces;

import com.itextpdf.kernel.pdf.PdfReader;
import com.itextpdf.signatures.DigestAlgorithms;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.PDFRenderer;

import java.awt.Graphics;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.swing.JPanel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.PrivateKey;
import java.security.cert.Certificate;
import java.util.Properties;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

import ec.gob.firmadigital.libreria.keystore.KeyStoreProvider;
import ec.gob.firmadigital.libreria.keystore.FileKeyStoreProvider;
import ec.gob.firmadigital.libreria.keystore.KeyStoreProviderFactory;
import ec.gob.firmadigital.libreria.keystore.KeyStoreUtilities;
import ec.gob.firmadigital.libreria.keystore.Alias;
import ec.gob.firmadigital.libreria.sign.pdf.PDFSignerItext;
import ec.gob.firmadigital.libreria.utils.FileUtils;
import ec.gob.firmadigital.libreria.utils.PropertiesUtils;
import ec.gob.firmadigital.libreria.utils.X509CertificateUtils;
import ec.gob.firmadigital.libreria.validaciones.DocumentoUtils;
import ec.gob.firmadigital.libreria.exceptions.RubricaException;
import ec.gob.firmadigital.libreria.exceptions.HoraServidorException;
import ec.gob.firmadigital.libreria.sign.pdf.RectanguloUtil;
import java.awt.Component;
import java.awt.geom.Point2D;
import java.time.Instant;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.common.PDRectangle;


/**
 *
 * @author Carlos
 */
public class frmVisualizadorPDF extends javax.swing.JFrame {

    private BufferedImage imagenPDF;
    private PDDocument documentoPDF;
    private PDFRenderer renderizadorPDF;
    private int paginaActual = 0;
    private JLabel lblEstampa;
    private JScrollPane scrollPane;
    private JLayeredPane panelContenido;



    private static String PKCS12 = "";
    private static String PASSWORD = "";
    private static String FILE = "";
    private static final String HASH_ALGORITHM = "SHA512";

    public static int xOriginal = 0;
    private static int yOriginal = 0;

    /**
     * Creates new form frmVisualizadorPDF
     */
    public frmVisualizadorPDF() {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH); // üî∏ Mostrar maximizado
        btnAnterior.addActionListener(e -> mostrarPagina(paginaActual - 1));
        btnSiguiente.addActionListener(e -> mostrarPagina(paginaActual + 1));        
    }

    public frmVisualizadorPDF(String documentoFirmar, String certificadoFirma, String claveFirma) throws Exception {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH); // üî∏ Mostrar maximizado
        btnAnterior.addActionListener(e -> mostrarPagina(paginaActual - 1));
        btnSiguiente.addActionListener(e -> mostrarPagina(paginaActual + 1));
        System.out.println("RUTA DOCUMENTO: " + documentoFirmar);
        this.FILE = documentoFirmar;
        this.PKCS12 = certificadoFirma;
        this.PASSWORD = claveFirma;
        cargarPDF();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        btnEstampar = new javax.swing.JButton();
        pnlDatosFirma = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtRazon = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtLocalizacion = new javax.swing.JTextField();
        txtFechaFirma = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btnAnterior = new javax.swing.JButton();
        btnSiguiente = new javax.swing.JButton();
        lblNumeroPagina = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(500, 600));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Documento a firmar"));
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 600));

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 405, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );

        btnEstampar.setText("Estampar");
        btnEstampar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEstamparActionPerformed(evt);
            }
        });

        pnlDatosFirma.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de firma"));

        jLabel3.setText("Fecha firma");

        jLabel1.setText("Raz√≥n firma");

        jLabel2.setText("Localizaci√≥n");

        txtFechaFirma.setText("2025-05-17T10:21:55.154265854");

        javax.swing.GroupLayout pnlDatosFirmaLayout = new javax.swing.GroupLayout(pnlDatosFirma);
        pnlDatosFirma.setLayout(pnlDatosFirmaLayout);
        pnlDatosFirmaLayout.setHorizontalGroup(
            pnlDatosFirmaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDatosFirmaLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(pnlDatosFirmaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtLocalizacion)
                    .addGroup(pnlDatosFirmaLayout.createSequentialGroup()
                        .addGroup(pnlDatosFirmaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtRazon, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .addGroup(pnlDatosFirmaLayout.createSequentialGroup()
                                .addGroup(pnlDatosFirmaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(pnlDatosFirmaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlDatosFirmaLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(406, 406, 406))
                            .addComponent(txtFechaFirma))))
                .addGap(14, 14, 14))
        );
        pnlDatosFirmaLayout.setVerticalGroup(
            pnlDatosFirmaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatosFirmaLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pnlDatosFirmaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatosFirmaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRazon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFechaFirma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtLocalizacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("P√°gina documento"));

        btnAnterior.setText("<");
        btnAnterior.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAnterior.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });

        btnSiguiente.setText(">");
        btnSiguiente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSiguiente.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });

        lblNumeroPagina.setText("1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addComponent(btnAnterior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(26, 26, 26)
                .addComponent(lblNumeroPagina)
                .addGap(18, 18, 18)
                .addComponent(btnSiguiente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(122, 122, 122))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAnterior)
                    .addComponent(btnSiguiente)
                    .addComponent(lblNumeroPagina))
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(862, Short.MAX_VALUE)
                        .addComponent(btnEstampar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 939, Short.MAX_VALUE)
                            .addComponent(pnlDatosFirma, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlDatosFirma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnEstampar)
                .addGap(17, 17, 17))
        );

        jPanel2.getAccessibleContext().setAccessibleName("P√°gina del documento");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEstamparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEstamparActionPerformed
        try{
            firmarDocumentoPDF();
        }catch(Exception ex){
        }        
    }//GEN-LAST:event_btnEstamparActionPerformed

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        lblNumeroPagina.setText(Integer.toString((paginaActual + 1)));
    }//GEN-LAST:event_btnAnteriorActionPerformed

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        lblNumeroPagina.setText(Integer.toString((paginaActual + 1)));
    }//GEN-LAST:event_btnSiguienteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmVisualizadorPDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmVisualizadorPDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmVisualizadorPDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmVisualizadorPDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmVisualizadorPDF().setVisible(true);
            }
        });
    }

    private void crearEstampa() {
        lblEstampa = new JLabel("ESTAMPA !!!");
        lblEstampa.setOpaque(true);
        lblEstampa.setBackground(new Color(255, 255, 200, 200)); // semi-transparente
        lblEstampa.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        lblEstampa.setSize(140, 50);  // tama√±o de la estampa
    }


    public void cargarPDF() {
        try {
            documentoPDF = PDDocument.load(new File(this.FILE));
            renderizadorPDF = new PDFRenderer(documentoPDF);
            paginaActual = 0;

            crearEstampa();

            // Panel de contenido con layout nulo para coordenadas absolutas
            panelContenido = new JLayeredPane();
            panelContenido.setLayout(null);

            scrollPane = new JScrollPane(panelContenido);
            scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

            jPanel1.removeAll();
            jPanel1.setLayout(new BorderLayout());
            jPanel1.add(scrollPane, BorderLayout.CENTER);
            jPanel1.revalidate();
            jPanel1.repaint();

            mostrarPagina(paginaActual);

        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar PDF: " + ex.getMessage());
        }
    }

    public Point2D.Float obtenerCoordenadasEstampaEnPDF() {
        if (lblEstampa == null || documentoPDF == null || renderizadorPDF == null) {
            return null;
        }

        try {
            // Obtener la p√°gina actual del PDF
            PDPage pagina = documentoPDF.getPage(paginaActual);
            PDRectangle mediaBox = pagina.getMediaBox();

            // Renderizar imagen original para obtener dimensiones del PDF real
            BufferedImage imagenPDF = renderizadorPDF.renderImageWithDPI(paginaActual, 150);
            int anchoImagen = imagenPDF.getWidth();
            int altoImagen = imagenPDF.getHeight();

            // Buscar el JLabel de la imagen dentro del panelContenido
            JLabel labelImagen = null;
            for (Component comp : panelContenido.getComponents()) {
                if (comp instanceof JLabel && ((JLabel) comp).getIcon() != null) {
                    labelImagen = (JLabel) comp;
                    break;
                }
            }

            if (labelImagen == null) {
                System.out.println("No se encontr√≥ el JLabel de la imagen.");
                return null;
            }

            // Posici√≥n del lblEstampa relativa a la imagen renderizada
            Point posEstampa = lblEstampa.getLocation();
            Point posImagen = labelImagen.getLocation();

            int xRel = posEstampa.x - posImagen.x + lblEstampa.getWidth() / 2; // centro de la estampa
            int yRel = posEstampa.y - posImagen.y + lblEstampa.getHeight() / 2;

            // Convertir coordenadas de imagen renderizada a coordenadas PDF
            float escalaX = mediaBox.getWidth() / (float) anchoImagen;
            float escalaY = mediaBox.getHeight() / (float) altoImagen;

            float xPDF = xRel * escalaX;
            float yPDF = mediaBox.getHeight() - (yRel * escalaY); // invertir Y

            // Ajustes manuales (en puntos del PDF)
            float ajusteX = 33.0f; // mueve 10 puntos PDF a la izquierda
            float ajusteY = -13.0f; // mueve 5 puntos PDF hacia arriba

            xPDF -= ajusteX;
            yPDF -= ajusteY;

            return new Point2D.Float(xPDF, yPDF);

        } catch (IOException ex) {
            ex.printStackTrace();
            return null;
        }
    }


    public void mostrarPagina(int indice) {
        try {
            if (indice < 0 || indice >= documentoPDF.getNumberOfPages()) return;

            paginaActual = indice;

            // Renderiza imagen del PDF
            BufferedImage imagen = renderizadorPDF.renderImageWithDPI(paginaActual, 150);
            int ancho = imagen.getWidth();
            int alto = imagen.getHeight();

            // Crear etiqueta de la imagen
            JLabel labelImagen = new JLabel(new ImageIcon(imagen));
            labelImagen.setBounds(0, 0, ancho, alto);

            // Eventos de clic y movimiento del mouse
            labelImagen.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    int x = e.getX();
                    int y = e.getY();
                    
                    Point2D.Float coords = obtenerCoordenadasEstampaEnPDF();

                    frmVisualizadorPDF.xOriginal = (int) coords.x;
                    frmVisualizadorPDF.yOriginal = (int) coords.y;
                }
            });

            labelImagen.addMouseMotionListener(new MouseMotionAdapter() {
                @Override
                public void mouseMoved(MouseEvent e) {
                    lblEstampa.setVisible(true);
                    lblEstampa.setLocation(
                        e.getX() - lblEstampa.getWidth() / 2,
                        e.getY() - lblEstampa.getHeight() / 2
                    );
                }
            });

            // Asegurar que panelContenido es un JLayeredPane
            if (!(panelContenido instanceof JLayeredPane)) {
                panelContenido = new JLayeredPane();
            }

            panelContenido.removeAll();
            panelContenido.setLayout(null);
            panelContenido.setPreferredSize(new Dimension(ancho, alto));
            panelContenido.setSize(ancho, alto);

            // Asegurar tama√±o y visibilidad de lblEstampa
            lblEstampa.setBounds(0, 0, lblEstampa.getWidth(), lblEstampa.getHeight());
            lblEstampa.setVisible(true);

            // A√±adir imagen en fondo y estampa en capa superior
            panelContenido.add(labelImagen, JLayeredPane.DEFAULT_LAYER);
            panelContenido.add(lblEstampa, JLayeredPane.PALETTE_LAYER);

            panelContenido.revalidate();
            panelContenido.repaint();

        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al renderizar p√°gina: " + ex.getMessage());
        }
    }


    private static KeyStore getKeyStore(String archivo, String password, String tipoKeyStoreProvider) throws KeyStoreException {
        if (archivo != null) { // ARCHIVO
            KeyStoreProvider ksp = new FileKeyStoreProvider(archivo);
            return ksp.getKeystore(password.toCharArray());
        } else { // TOKEN
            return KeyStoreProviderFactory.getKeyStore(password, tipoKeyStoreProvider);
        }
    }

    public static String seleccionarAlias(KeyStore keyStore, JRootPane jRootPane) throws RubricaException {
        String aliasString = null;
        // Con que certificado firmar?
        List<Alias> signingAliases = KeyStoreUtilities.getSigningAliases(keyStore);

        if (signingAliases.isEmpty()) {
            throw new RubricaException("No se encuentran certificados para firmar\nPuede estar caducado o revocado");
        }

        if (signingAliases.size() == 1) {
            aliasString = signingAliases.get(0).getAlias();
        } else {
            Alias alias = (Alias) JOptionPane.showInputDialog(jRootPane == null ? null : jRootPane, "Escoja...", "Certificado para firmar",
                    JOptionPane.QUESTION_MESSAGE, null, signingAliases.toArray(), signingAliases.get(0));
            if (alias != null) {
                aliasString = alias.getAlias();
            }
        }
        return aliasString;
    }

    private Properties parametros() throws IOException, HoraServidorException {

        String llx = Integer.toString(frmVisualizadorPDF.xOriginal);
        String lly = Integer.toString(frmVisualizadorPDF.yOriginal);

        Properties params = new Properties();
        params.setProperty(PDFSignerItext.SIGNING_LOCATION, "");
        params.setProperty(PDFSignerItext.SIGNING_REASON, "");

        DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME;

        LocalDateTime fechaHora = LocalDateTime.parse(txtFechaFirma.getText());
        ZonedDateTime fechaconZona = fechaHora.atZone(ZoneId.of("America/Guayaquil"));

        String fechaFormateada = fechaconZona.format(formatter);
        System.out.println("Fecha y hora asignada: " + fechaFormateada);
        System.out.println("PAGINA: " + (paginaActual + 1));

        params.setProperty(PDFSignerItext.SIGN_TIME, fechaFormateada);
        params.setProperty(PDFSignerItext.LAST_PAGE, Integer.toString((paginaActual + 1)));
        params.setProperty(PDFSignerItext.TYPE_SIG, "QR");
        params.setProperty(PDFSignerItext.INFO_QR, "VALIDAR CON: www.firmadigital.gob.ec");
        params.setProperty(PDFSignerItext.INFO_QR_2, "Firmado digitalmente con FirmaEC 4.0.1 Windows 11 10.0");
        
        //params.setProperty(PDFSigner.FONT_SIZE, "4.5");
        // Posicion firma
        params.setProperty(RectanguloUtil.POSITION_ON_PAGE_LOWER_LEFT_X, llx);
        params.setProperty(RectanguloUtil.POSITION_ON_PAGE_LOWER_LEFT_Y, lly);
        
        return params;
    }

    private void firmarDocumentoPDF() throws KeyStoreException, Exception {
        KeyStore keyStore = getKeyStore(PKCS12, PASSWORD, null);
        ////// LEER PDF:
        byte[] docByteArry = DocumentoUtils.loadFile(this.FILE);
        byte[] signed = null;
        String alias = seleccionarAlias(keyStore, null);
        PrivateKey key = (PrivateKey) keyStore.getKey(alias, PASSWORD.toCharArray());

        X509CertificateUtils x509CertificateUtils = new X509CertificateUtils();
        System.out.println("x509CertificateUtils: " + x509CertificateUtils);
        
        Certificate[] certChain = keyStore.getCertificateChain(alias);
        Properties properties = parametros();
        properties.setProperty(PDFSignerItext.PATH, this.FILE);
        PdfReader reader = new PdfReader(this.FILE);
        PDFSignerItext pDFSignerItext = new PDFSignerItext();
        pDFSignerItext.setProvider(keyStore.getProvider());//QA
        signed = pDFSignerItext.sign(docByteArry, DigestAlgorithms.SHA512, key, certChain, properties, PropertiesUtils.versionBase64());
        System.out.println("DOCUMENTO FIRMADO\n-------");
        ////// Permite guardar el archivo en el equipo y luego lo abre
        String nombreDocumento = FileUtils.crearNombreFirmado(new File(this.FILE), FileUtils.getExtension(signed));
        FileOutputStream fos = new java.io.FileOutputStream(nombreDocumento);
        System.out.println("fos: " + fos);
        //Abrir documento
        new java.util.Timer().schedule(new java.util.TimerTask() {
            @Override
            public void run() {
                try {
                    FileUtils.abrirDocumento(nombreDocumento);
                    System.out.println(nombreDocumento);
                    // verificarDocumento(nombreDocumento);
                } catch (java.lang.Exception ex) {
                    ex.printStackTrace();
                } finally {
                    System.exit(0);
                }
            }
        }, 3000); //espera 3 segundos
        fos.write(signed);
        fos.close();
    }
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnEstampar;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblNumeroPagina;
    private javax.swing.JPanel pnlDatosFirma;
    private javax.swing.JTextField txtFechaFirma;
    private javax.swing.JTextField txtLocalizacion;
    private javax.swing.JTextField txtRazon;
    // End of variables declaration//GEN-END:variables
}
