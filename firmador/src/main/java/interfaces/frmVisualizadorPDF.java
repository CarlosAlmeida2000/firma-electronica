/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaces;

import com.itextpdf.kernel.pdf.PdfReader;
import com.itextpdf.signatures.DigestAlgorithms;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.PDFRenderer;

import java.awt.Graphics;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.swing.JPanel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.PrivateKey;
import java.security.cert.Certificate;
import java.util.Properties;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

import ec.gob.firmadigital.libreria.keystore.KeyStoreProvider;
import ec.gob.firmadigital.libreria.keystore.FileKeyStoreProvider;
import ec.gob.firmadigital.libreria.keystore.KeyStoreProviderFactory;
import ec.gob.firmadigital.libreria.keystore.KeyStoreUtilities;
import ec.gob.firmadigital.libreria.keystore.Alias;
import ec.gob.firmadigital.libreria.sign.pdf.PDFSignerItext;
import ec.gob.firmadigital.libreria.utils.FileUtils;
import ec.gob.firmadigital.libreria.utils.PropertiesUtils;
import ec.gob.firmadigital.libreria.utils.X509CertificateUtils;
import ec.gob.firmadigital.libreria.validaciones.DocumentoUtils;
import ec.gob.firmadigital.libreria.exceptions.RubricaException;
import ec.gob.firmadigital.libreria.exceptions.HoraServidorException;
import ec.gob.firmadigital.libreria.sign.pdf.RectanguloUtil;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

import java.util.List;
import javax.swing.JRootPane;


/**
 *
 * @author Carlos
 */
public class frmVisualizadorPDF extends javax.swing.JFrame {

    private BufferedImage imagenPDF;
    private PDDocument documentoPDF;
    private PDFRenderer renderizadorPDF;
    private int paginaActual = 0;
    private JLabel lblEstampa;


    private static String PKCS12 = "D:\\firma_ciad.p12";
    private static String PASSWORD = "Carlos2025";
    private static String FILE = "";
    private static final String HASH_ALGORITHM = "SHA512";

    public static int xOriginal = 0;
    private static int yOriginal = 0;

    /**
     * Creates new form frmVisualizadorPDF
     */
    public frmVisualizadorPDF() {
        initComponents();
        btnAnterior.addActionListener(e -> mostrarPagina(paginaActual - 1));
        btnSiguiente.addActionListener(e -> mostrarPagina(paginaActual + 1));
    }

    public frmVisualizadorPDF(String ruta) throws Exception {
        initComponents();
        btnAnterior.addActionListener(e -> mostrarPagina(paginaActual - 1));
        btnSiguiente.addActionListener(e -> mostrarPagina(paginaActual + 1));
        System.out.println("RUTA DOCUMENTO: " + ruta);
        this.FILE = ruta;
        cargarPDF(ruta);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        btnEstampar = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        btnSiguiente = new javax.swing.JButton();
        txtFechaHora = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 867, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 405, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(89, Short.MAX_VALUE)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );

        btnEstampar.setText("Estampar");
        btnEstampar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEstamparActionPerformed(evt);
            }
        });

        btnAnterior.setText("Anterior");

        btnSiguiente.setText("Siguiente");

        txtFechaHora.setText("2025-05-17T10:21:55.154265");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAnterior)
                            .addComponent(btnSiguiente)
                            .addComponent(btnEstampar))
                        .addGap(0, 68, Short.MAX_VALUE))
                    .addComponent(txtFechaHora, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(btnAnterior)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSiguiente)
                        .addGap(61, 61, 61)
                        .addComponent(txtFechaHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEstampar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEstamparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEstamparActionPerformed
        try{
            firmarDocumentoPDF(FILE);
        }catch(Exception ex){
        }        
    }//GEN-LAST:event_btnEstamparActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmVisualizadorPDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmVisualizadorPDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmVisualizadorPDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmVisualizadorPDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmVisualizadorPDF().setVisible(true);
            }
        });
    }

    private void crearEstampa() {
        lblEstampa = new JLabel("Firma aquí");
        lblEstampa.setOpaque(true);
        lblEstampa.setBackground(new Color(255, 255, 200, 200)); // semi-transparente
        lblEstampa.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        lblEstampa.setSize(100, 40);  // tamaño de la estampa
    }

    public void cargarPDF(String rutaArchivo) {
        try {
            documentoPDF = PDDocument.load(new File(rutaArchivo));
            renderizadorPDF = new PDFRenderer(documentoPDF);
            paginaActual = 0;
            crearEstampa();  
            mostrarPagina(paginaActual);
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar PDF: " + ex.getMessage());
        }
    }

    public void mostrarPagina(int indice) {
       try {
           if (indice < 0 || indice >= documentoPDF.getNumberOfPages()) return;

           paginaActual = indice;
           BufferedImage imagen = renderizadorPDF.renderImageWithDPI(paginaActual, 150);
           int panelAncho = jPanel1.getWidth();

           double escala = (double) panelAncho / imagen.getWidth();
           int nuevoAncho = panelAncho;
           int nuevoAlto = (int) (imagen.getHeight() * escala);

           BufferedImage imagenEscalada = new BufferedImage(nuevoAncho, nuevoAlto, BufferedImage.TYPE_INT_RGB);
           Graphics g = imagenEscalada.getGraphics();
           g.drawImage(imagen, 0, 0, nuevoAncho, nuevoAlto, null);
           g.dispose();

           JLabel labelImagen = new JLabel(new javax.swing.ImageIcon(imagenEscalada));
           labelImagen.setBounds(0, 0, nuevoAncho, nuevoAlto);
           labelImagen.addMouseListener(new MouseAdapter() {
               public void mouseClicked(MouseEvent e) {

                   int x = e.getX();
                   int y = e.getY();
                   frmVisualizadorPDF.xOriginal = (int) (x / escala);
                   frmVisualizadorPDF.yOriginal = (int) (y / escala);
                   
                   System.out.println("Página " + (paginaActual + 1) + " - clic en X: " + xOriginal + ", Y: " + yOriginal);
               }
           });

           labelImagen.addMouseMotionListener(new MouseMotionAdapter() {
               @Override
               public void mouseMoved(MouseEvent e) {
                   lblEstampa.setVisible(true);
                   lblEstampa.setLocation(e.getX() - lblEstampa.getWidth() / 2, e.getY() - lblEstampa.getHeight() / 2);
               }
           });

           jLayeredPane1.removeAll();  // Limpiar el panel
           jLayeredPane1.setLayout(null);  // Usar coordenadas absolutas
           jLayeredPane1.setPreferredSize(new Dimension(nuevoAncho, nuevoAlto));
           jLayeredPane1.setSize(new Dimension(nuevoAncho, nuevoAlto));
           jLayeredPane1.add(labelImagen, JLayeredPane.DEFAULT_LAYER);

           if (lblEstampa != null) {
               jLayeredPane1.add(lblEstampa, JLayeredPane.POPUP_LAYER);
           }

           jLayeredPane1.revalidate();
           jLayeredPane1.repaint();

       } catch (IOException ex) {
           ex.printStackTrace();
           JOptionPane.showMessageDialog(this, "Error al renderizar página: " + ex.getMessage());
       }
   }

    private static KeyStore getKeyStore(String archivo, String password, String tipoKeyStoreProvider) throws KeyStoreException {
        if (archivo != null) { // ARCHIVO
            KeyStoreProvider ksp = new FileKeyStoreProvider(archivo);
            return ksp.getKeystore(password.toCharArray());
        } else { // TOKEN
            return KeyStoreProviderFactory.getKeyStore(password, tipoKeyStoreProvider);
        }
    }

    public static String seleccionarAlias(KeyStore keyStore, JRootPane jRootPane) throws RubricaException {
        String aliasString = null;
        // Con que certificado firmar?
        List<Alias> signingAliases = KeyStoreUtilities.getSigningAliases(keyStore);

        if (signingAliases.isEmpty()) {
            throw new RubricaException("No se encuentran certificados para firmar\nPuede estar caducado o revocado");
        }

        if (signingAliases.size() == 1) {
            aliasString = signingAliases.get(0).getAlias();
        } else {
            Alias alias = (Alias) JOptionPane.showInputDialog(jRootPane == null ? null : jRootPane, "Escoja...", "Certificado para firmar",
                    JOptionPane.QUESTION_MESSAGE, null, signingAliases.toArray(), signingAliases.get(0));
            if (alias != null) {
                aliasString = alias.getAlias();
            }
        }
        return aliasString;
    }

    private Properties parametros() throws IOException, HoraServidorException {

        String llx = Integer.toString(frmVisualizadorPDF.xOriginal);
        String lly = Integer.toString(frmVisualizadorPDF.yOriginal);

        Properties params = new Properties();
        params.setProperty(PDFSignerItext.SIGNING_LOCATION, "");
        params.setProperty(PDFSignerItext.SIGNING_REASON, "");
        LocalDateTime fechaHora = LocalDateTime.parse("2025-05-17T10:21:55.154265");
        ZonedDateTime fechaconZona = fechaHora.atZone(ZoneId.of("America/Guayaquil"));

        // Formatear en formato ISO-8601
        DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME;
        String fechaFormateada = fechaconZona.format(formatter);

        System.out.println("Fecha y hora asignada: " + fechaFormateada);
        System.out.println("PAGINA: " + (paginaActual + 1));

        params.setProperty(PDFSignerItext.SIGN_TIME, fechaFormateada);
        params.setProperty(PDFSignerItext.LAST_PAGE, Integer.toString((paginaActual + 1)));
        params.setProperty(PDFSignerItext.TYPE_SIG, "QR");
        params.setProperty(PDFSignerItext.INFO_QR, "VALIDAR CON: www.firmadigital.gob.ec");
        params.setProperty(PDFSignerItext.INFO_QR_2, "Firmado digitalmente con FirmaEC 4.0.1 Windows 11 10.0");
        
        //params.setProperty(PDFSigner.FONT_SIZE, "4.5");
        // Posicion firma
        params.setProperty(RectanguloUtil.POSITION_ON_PAGE_LOWER_LEFT_X, llx);
        params.setProperty(RectanguloUtil.POSITION_ON_PAGE_LOWER_LEFT_Y, lly);
        
        return params;
    }

    private void firmarDocumentoPDF(String file) throws KeyStoreException, Exception {
        KeyStore keyStore = getKeyStore(PKCS12, PASSWORD, null);
        ////// LEER PDF:
        byte[] docByteArry = DocumentoUtils.loadFile(file);
        byte[] signed = null;
        String alias = seleccionarAlias(keyStore, null);
        PrivateKey key = (PrivateKey) keyStore.getKey(alias, PASSWORD.toCharArray());

        X509CertificateUtils x509CertificateUtils = new X509CertificateUtils();
        System.out.println("x509CertificateUtils: " + x509CertificateUtils);
        
        Certificate[] certChain = keyStore.getCertificateChain(alias);
        Properties properties = parametros();
        properties.setProperty(PDFSignerItext.PATH, file);
        PdfReader reader = new PdfReader(file);
        PDFSignerItext pDFSignerItext = new PDFSignerItext();
        pDFSignerItext.setProvider(keyStore.getProvider());//QA
        signed = pDFSignerItext.sign(docByteArry, DigestAlgorithms.SHA512, key, certChain, properties, PropertiesUtils.versionBase64());
        System.out.println("DOCUMENTO FIRMADO\n-------");
        ////// Permite guardar el archivo en el equipo y luego lo abre
        String nombreDocumento = FileUtils.crearNombreFirmado(new File(file), FileUtils.getExtension(signed));
        FileOutputStream fos = new java.io.FileOutputStream(nombreDocumento);
        System.out.println("fos: " + fos);
        //Abrir documento
        new java.util.Timer().schedule(new java.util.TimerTask() {
            @Override
            public void run() {
                try {
                    FileUtils.abrirDocumento(nombreDocumento);
                    System.out.println(nombreDocumento);
                    // verificarDocumento(nombreDocumento);
                } catch (java.lang.Exception ex) {
                    StackTraceElement[] stackTrace = ex.getStackTrace();
                    if (stackTrace.length > 0) {
                        StackTraceElement first = stackTrace[0];
                        System.out.println("Error en clase: " + first.getClassName());
                        System.out.println("Error en método: " + first.getMethodName());
                        System.out.println("Error en línea: " + first.getLineNumber());
                    }
                    ex.printStackTrace();
                } finally {
                    System.exit(0);
                }
            }
        }, 3000); //espera 3 segundos
        fos.write(signed);
        fos.close();
    }
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnEstampar;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtFechaHora;
    // End of variables declaration//GEN-END:variables
}
